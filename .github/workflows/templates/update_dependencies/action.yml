name: check_node_dependencies

inputs:
  ecr_registry:
    description: ECR Registry URL
    required: true

  node_base_repository:
    description: Node base repository name
    required: true
    default: node_base

  django_base_repository:
    description: Django base repository name
    required: true
    default: django_base

  docker_tag:
    description: Tag to add to images
    required: true
 
outputs:
  changed:
    description: "Has Node base dockerfile or dependencies changed?"
    value: ${{ steps.check_for_node_change.outputs.changed }}

runs:
  using: "composite"
  steps:
    - name: "Check Node Dependencies"
      id: check_for_node_change
      shell: bash
      run: |
        changed=false
        if git diff --exit-code HEAD^..HEAD docker/production/node_base/Dockerfile; then
          true
        else
          changed=true
        fi
        if git diff --exit-code -I '"version":' HEAD^..HEAD package.json; then
          true
        else
          changed=true
        fi
        echo "changed=${changed}" >> $GITHUB_OUTPUT

    - name: "Check Python Dependencies"
      id: check_for_python_change
      shell: bash
      run: |
        changed=false
        if git diff --exit-code HEAD^..HEAD docker/production/django_base/Dockerfile; then
          true
        else
          changed=true
        fi
        if git diff --exit-code -I '^version =' HEAD^..HEAD pyproject.toml; then
          true
        else
          changed=true
        fi
        echo "changed=${changed}" >> $GITHUB_OUTPUT

    - name: "Check if images with required tag exist in Amazon ECR"
      shell: bash
      id: check_images
      run: |
        if docker manifest inspect ${{ inputs.ecr_registry }}/${{ inputs.node_base_repository }}:${{ inputs.docker_tag }} >/dev/null; then
            echo "node_image_exists=true" >> $GITHUB_OUTPUT
        else
            echo "node_image_exists=false" >> $GITHUB_OUTPUT
        fi
        if docker manifest inspect ${{ inputs.ecr_registry }}/${{ inputs.django_base_repository }}:${{ inputs.docker_tag }} >/dev/null; then
            echo "django_image_exists=true" >> $GITHUB_OUTPUT
        else
            echo "django_image_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: "Build Node Base"
      id: build_node_base
      if: steps.check_for_node_change.outputs.changed == 'true' || steps.check_images.outputs.node_image_exists == 'false'
      uses: "./.github/workflows/templates/docker_cached_build"
      with:
        ecr_registry: ${{ inputs.ecr_registry }}
        repository: ${{ inputs.node_base_repository }}
        docker_tag: ${{ inputs.docker_tag }}
        dockerfile_location: "./docker/production/node_base/Dockerfile"

    - name: "Build Django Base"
      id: build_django_base
      if: steps.check_for_python_change.outputs.changed == 'true' || steps.check_images.outputs.django_image_exists == 'false'
      uses: "./.github/workflows/templates/docker_cached_build"
      with:
        ecr_registry: ${{ inputs.ecr_registry }}
        repository: ${{ inputs.django_base_repository }}
        docker_tag: ${{ inputs.docker_tag }}
        dockerfile_location: "./docker/production/django_base/Dockerfile"


    # - name: "Build Node Base"
    #   id: build_node_base
    #   if: steps.check_for_node_change.outputs.changed == 'true' || steps.check_images.outputs.node_image_exists == 'false'
    #   shell: bash
    #   run: |    
    #     node_base_image=${{ inputs.ecr_registry }}/${{ inputs.node_base_repository }}:${{ inputs.docker_tag }}
    #     node_base_latest_image=${{ inputs.ecr_registry }}/${{ inputs.node_base_repository }}:latest
    #     echo "node_base_image=${node_base_image}" >> $GITHUB_OUTPUT
    #     aws ecr create-repository --repository-name ${{ inputs.node_base_repository }} || true
    #     if [ "${{ steps.check_images.outputs.node_image_exists }}" = "true" ]; then
    #       echo "${node_base_image} not found" 
    #       cachefrom="--cache-from ${node_base_image}"
    #       docker pull $node_base_image
    #     elif [ "${{ steps.check_images.outputs.node_image_latest_exists }}" = "true" ]; then
    #       echo "${node_base_latest_image} not found" 
    #       cachefrom="--cache-from ${node_base_latest_image}"
    #       docker pull $node_base_latest_image
    #     else
    #       cachefrom=""
    #     fi
    #     echo $cachefrom
    #     docker build $cachefrom -t ${node_base_image} -f ./docker/production/node_base/Dockerfile .
    #     docker push ${{ inputs.ecr_registry }}/${{ inputs.node_base_repository }} --all-tags

    # - name: "Build Django Base"
    #   id: build_django_base
    #   if: steps.check_for_python_change.outputs.changed == 'true' || steps.check_images.outputs.django_image_exists == 'false'
    #   shell: bash
    #   run: |    
    #     django_base_image=${{ inputs.ecr_registry }}/${{ inputs.django_base_repository }}:${{ inputs.docker_tag }}
    #     django_base_latest_image=${{ inputs.ecr_registry }}/${{ inputs.django_base_repository }}:latest
    #     echo "django_base_image=${django_base_image}" >> $GITHUB_OUTPUT
    #     aws ecr create-repository --repository-name ${{ inputs.django_base_repository }} || true
    #     if [ "${{ steps.check_images.outputs.django_image_exists }}" = "true" ]; then
    #       echo "${django_base_image} not found" 
    #       cachefrom="--cache-from ${django_base_image}"
    #       docker pull $django_base_image
    #     elif [ "${{ steps.check_images.outputs.django_image_latest_exists }}" = "true" ]; then
    #       echo "${django_base_latest_image} not found" 
    #       cachefrom="--cache-from ${django_base_latest_image}"
    #       docker pull $django_base_latest_image
    #     else
    #       cachefrom=""
    #     fi
    #     echo $cachefrom
    #     docker build $cachefrom -t ${django_base_image} -f ./docker/production/django_base/Dockerfile .
    #     docker push ${{ inputs.ecr_registry }}/${{ inputs.django_base_repository }} --all-tags
