{
  "header": {
    "namespaces": { "x": "http://www.netex.org.uk/netex" }
  },
  "observations": [
    {
      "details": "Mandatory element 'TariffBasis' missing",
      "category": "Mandatory Element",
      "context": "//x:tariffs//x:Tariff",
      "rules": [
        {
          "test": "count(x:TariffBasis) > 0"
        }
      ]
    },
    {
      "details": "Mandatory element 'validityConditions' missing",
      "category": "Mandatory Element",
      "context": "//x:tariffs//x:Tariff",
      "rules": [
        {
          "test": "count(x:validityConditions) > 0"
        }
      ]
    },
    {
      "details": "If ProductType is dayPass or periodPass, timeIntervals element should be present in Tariff",
      "category": "Conditional Check",
      "context": "//x:CompositeFrame/x:frames/x:FareFrame",
      "rules": [
        { 
          "test": "is_time_intervals_present_in_tarrifs(.)" 
        }
      ]
    },
    {
      "details": "If ProductType is dayPass or periodPass, FareStructureElement elements should be present in Tariff.FareStructureElements",
      "category": "Conditional Check",
      "context": "//x:CompositeFrame/x:frames/x:FareFrame",
      "rules": [
        { 
          "test": "is_fare_structure_element_present(.)" 
        }
      ]
    },
    {
      "details": "If ProductType is singleTrip, dayReturnTrip or periodReturnTrip, FareStructureElement.GenericParameterAssignment elements should be present in Tariff.FareStructureElements",
      "category": "Conditional Check",
      "context": "//x:CompositeFrame/x:frames/x:FareFrame",
      "rules": [
        { 
          "test": "is_generic_parameter_limitions_present(.)" 
        }
      ]
    },
    {
      "details": "validityParameters should either be nested within GenericParameterAssignment.ValidityParameterGroupingType or GenericParameterAssignment.ValidityParameterAssignmentType",
      "category": "Conditional Check",
      "context": "//x:tariffs/x:Tariff/x:fareStructureElements/x:FareStructureElement/x:GenericParameterAssignment",
      "rules": [
        { 
          "test": "check_placement_validity_parameters(.)" 
        }
      ]
    },
    {
      "details": "If fareZones is present in FareFrame, additional fareZones properties should be present",
      "category": "Conditional Check",
      "context": "//x:CompositeFrame/x:frames/x:FareFrame/x:fareZones",
      "rules": [
        { 
          "test": "is_fare_zones_present_in_fare_frame(.)" 
        }
      ]
    },
    {
      "details": "If ServiceFrame is present, TypeOfFrameRef should include UK_PI_NETWORK",
      "category": "Conditional Check",
      "context": "//x:CompositeFrame/x:frames/x:ServiceFrame",
      "rules": [
        { 
          "test": "is_service_frame_present(.)" 
        }
      ]
    },
    {
      "details": "If lines present in ServiceFrame, corresponding Line properties should be present",
      "category": "Conditional Check",
      "context": "//x:CompositeFrame/x:frames/x:ServiceFrame/x:lines",
      "rules": [
        { 
          "test": "is_lines_present_in_service_frame(.)" 
        }
      ]
    },
    {
      "details": "If scheduledStopPoints is present in ServiceFrame, it's other properties should be present",
      "category": "Conditional Check",
      "context": "//x:CompositeFrame/x:frames/x:ServiceFrame/x:scheduledStopPoints",
      "rules": [
        { 
          "test": "is_schedule_stop_points(.)" 
        }
      ]
    },
    {
      "details": "Mandatory element 'ValidBetween' missing",
      "category": "Mandatory Element",
      "context": "//x:CompositeFrame",
      "rules": [
        {
          "test": "count(x:ValidBetween) > 0"
        }
      ]
    },
    {
      "details": "Mandatory element 'FromDate' missing",
      "category": "Mandatory Element",
      "context": "//x:CompositeFrame/x:ValidBetween",
      "rules": [
        {
          "test": "count(x:FromDate) > 0"
        }
      ]
    },
    {
      "details": "Mandatory element 'TypeOfFrameRef' missing'",
      "category": "Mandatory Element",
      "context": "//x:CompositeFrame",
      "rules": [
        {
          "test": "count(x:TypeOfFrameRef) > 0"
        }
      ]
    },
    {
      "details": "Attribute 'ref' of element 'TypeOfFrameRef' is missing or attribute 'ref' value does not contain 'UK_PI_LINE_FARE_OFFER' or 'UK_PI_NETWORK_OFFER'",
      "category": "Mandatory Element",
      "context": "//x:CompositeFrame/x:TypeOfFrameRef",
      "rules": [
        {
          "test": "check_value_of_type_of_frame_ref(.)"
        }
      ]
    },
    {
      "details": "Mandatory element 'Organisations' missing",
      "category": "Mandatory Element",
      "context": "//x:CompositeFrame/x:frames/x:ResourceFrame",
      "rules": [
        {
          "test": "count(x:organisations) > 0"
        }
      ]
    },
    {
      "details": "Mandatory element 'Operator' missing",
      "category": "Mandatory Element",
      "context": "//x:ResourceFrame/x:organisations",
      "rules": [
        {
          "test": "count(x:Operator) > 0"
        }
      ]
    },
    {
      "details": "'Operator' attribute 'id' format should be noc:xxxx",
      "category": "Mandatory Element",
      "context": "//x:ResourceFrame/x:organisations/x:Operator",
      "rules": [
        {
          "test": "check_operator_id_format(.)"
        }
      ]
    },
    {
      "details": "Mandatory element 'Public Code' missing",
      "category": "Mandatory Element",
      "context": "//x:ResourceFrame/x:organisations/x:Operator",
      "rules": [
        {
          "test": "count(x:PublicCode) > 0"
        }
      ]
    },
    {
      "details": "Element 'Public Code' should be 4 characters long",
      "category": "Mandatory Element",
      "context": "//x:ResourceFrame/x:organisations/x:Operator/x:PublicCode",
      "rules": [
        {
          "test": "check_public_code_length(.)"
        }
      ]
    },
    {
      "details": "Mandatory element 'Name' missing",
      "category": "Mandatory Element",
      "context": "//x:ResourceFrame/x:organisations/x:Operator",
      "rules": [
        {
          "test": "count(x:Name) > 0"
        }
      ]
    }
  ]
}
