# coding: utf-8

"""
    CAVL Config API

    Used to configure feed consumers in the CAVL Service  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: greg.brown@itoworld.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ValidationTaskResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "url": "str",
        "username": "str",
        "password": "str",
        "status": "str",
        "created": "datetime",
    }

    attribute_map = {
        "url": "url",
        "username": "username",
        "password": "password",
        "status": "status",
        "created": "created",
    }

    def __init__(
        self, url=None, username=None, password=None, status="DEPLOYING", created=None
    ):  # noqa: E501
        """ValidationTaskResult - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._username = None
        self._password = None
        self._status = None
        self._created = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if status is not None:
            self.status = status
        if created is not None:
            self.created = created

    @property
    def url(self):
        """Gets the url of this ValidationTaskResult.  # noqa: E501


        :return: The url of this ValidationTaskResult.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ValidationTaskResult.


        :param url: The url of this ValidationTaskResult.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this ValidationTaskResult.  # noqa: E501


        :return: The username of this ValidationTaskResult.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ValidationTaskResult.


        :param username: The username of this ValidationTaskResult.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ValidationTaskResult.  # noqa: E501


        :return: The password of this ValidationTaskResult.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ValidationTaskResult.


        :param password: The password of this ValidationTaskResult.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def status(self):
        """Gets the status of this ValidationTaskResult.  # noqa: E501


        :return: The status of this ValidationTaskResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValidationTaskResult.


        :param status: The status of this ValidationTaskResult.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "DEPLOYING",
            "SYSTEM_ERROR",
            "FEED_VALID",
            "FEED_INVALID",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def created(self):
        """Gets the created of this ValidationTaskResult.  # noqa: E501


        :return: The created of this ValidationTaskResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ValidationTaskResult.


        :param created: The created of this ValidationTaskResult.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ValidationTaskResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationTaskResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
