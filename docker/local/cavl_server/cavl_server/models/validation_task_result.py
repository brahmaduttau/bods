# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from cavl_server import util
from cavl_server.models.base_model_ import Model


class ValidationTaskResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        url: str = None,
        username: str = None,
        password: str = None,
        status: str = "DEPLOYING",
        created: datetime = None,
    ):  # noqa: E501
        """ValidationTaskResult - a model defined in Swagger

        :param url: The url of this ValidationTaskResult.  # noqa: E501
        :type url: str
        :param username: The username of this ValidationTaskResult.  # noqa: E501
        :type username: str
        :param password: The password of this ValidationTaskResult.  # noqa: E501
        :type password: str
        :param status: The status of this ValidationTaskResult.  # noqa: E501
        :type status: str
        :param created: The created of this ValidationTaskResult.  # noqa: E501
        :type created: datetime
        """
        self.swagger_types = {
            "url": str,
            "username": str,
            "password": str,
            "status": str,
            "created": datetime,
        }

        self.attribute_map = {
            "url": "url",
            "username": "username",
            "password": "password",
            "status": "status",
            "created": "created",
        }
        self._url = url
        self._username = username
        self._password = password
        self._status = status
        self._created = created

    @classmethod
    def from_dict(cls, dikt) -> "ValidationTaskResult":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValidationTaskResult of this ValidationTaskResult.  # noqa: E501
        :rtype: ValidationTaskResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self) -> str:
        """Gets the url of this ValidationTaskResult.


        :return: The url of this ValidationTaskResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this ValidationTaskResult.


        :param url: The url of this ValidationTaskResult.
        :type url: str
        """

        self._url = url

    @property
    def username(self) -> str:
        """Gets the username of this ValidationTaskResult.


        :return: The username of this ValidationTaskResult.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this ValidationTaskResult.


        :param username: The username of this ValidationTaskResult.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this ValidationTaskResult.


        :return: The password of this ValidationTaskResult.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this ValidationTaskResult.


        :param password: The password of this ValidationTaskResult.
        :type password: str
        """

        self._password = password

    @property
    def status(self) -> str:
        """Gets the status of this ValidationTaskResult.


        :return: The status of this ValidationTaskResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ValidationTaskResult.


        :param status: The status of this ValidationTaskResult.
        :type status: str
        """
        allowed_values = [
            "DEPLOYING",
            "SYSTEM_ERROR",
            "FEED_VALID",
            "FEED_INVALID",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def created(self) -> datetime:
        """Gets the created of this ValidationTaskResult.


        :return: The created of this ValidationTaskResult.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this ValidationTaskResult.


        :param created: The created of this ValidationTaskResult.
        :type created: datetime
        """

        self._created = created
